
四大组件： activity 活动   service  服务  broadcast receive（广播接收器）   content provider （内容提供者）

activity的生命周期
onCreat()  onStart()  onResume()  onRestart()  onPause()  onStop()  onDestory()

service的生命周期
onCreat()  onStartCommand()  onDestory()
onCreat()  onBind()  onUnBind()  onDestory()
服务（Service)是Android中实现程序后台运行的解决方案

启动服务的两种方式：（开发人员需要在应用程序配置文件中声明全部的service，使用<service></service>标签）
1) startService()
started service（启动服务）是由其他组件调用startService()方法启动的，这导致服务的onStartCommand()方法被调用。
当服务是started状态时，其生命周期与启动它的组件无关，并且可以在后台无限期运行，即使启动服务的组件已经被销毁。
因此，服务需要在完成任务后调用stopSelf()方法停止，或者由其他组件调用stopService()方法停止。

2）bindService()
使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止。


Service的onCreate回调函数可以做耗时的操作吗？
不可以，Service的onCreate是在主线程（ActivityThread）中调用的，耗时操作会阻塞UI

如果需要做耗时的操作，如何处理？
线程和Handler方式。 （开服务，服务中开线程进行耗时操作，但是多个线程，很难管理）

IntentService与Service的区别
Service中无法处理耗时操作，如果需要处理，只能自己新开线程。
IntentService内有一个工作线程来处理耗时操作，启动方式去传统的一致。当任务执行完后，IntentService会自动停止，而不需要我们手动去控制或stopSelf()。
另外，可以启动IntentService多次，而每一个耗时操作会以工作队列的方式在IntentService的onHandleIntent回调方法中执行，并且，每次只会执行一个工作线程，执行完第一个再执行第二个，以此类推。

intentservice的创建方式：














